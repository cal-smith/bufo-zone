// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: query.sql

package dbufo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBufo = `-- name: CreateBufo :one
insert into
    viewer_bufo (name, created)
values
    ($1, $2)
on conflict(name) do update set name = EXCLUDED.name
returning name, created
`

type CreateBufoParams struct {
	Name    string
	Created pgtype.Timestamptz
}

func (q *Queries) CreateBufo(ctx context.Context, arg CreateBufoParams) (ViewerBufo, error) {
	row := q.db.QueryRow(ctx, createBufo, arg.Name, arg.Created)
	var i ViewerBufo
	err := row.Scan(&i.Name, &i.Created)
	return i, err
}

const createVote = `-- name: CreateVote :one
insert into
    viewer_bufovote (value, created, bufo_id)
values
    ($1, $2, $3) returning id, value, created, bufo_id
`

type CreateVoteParams struct {
	Value   int32
	Created pgtype.Timestamptz
	BufoID  string
}

func (q *Queries) CreateVote(ctx context.Context, arg CreateVoteParams) (ViewerBufovote, error) {
	row := q.db.QueryRow(ctx, createVote, arg.Value, arg.Created, arg.BufoID)
	var i ViewerBufovote
	err := row.Scan(
		&i.ID,
		&i.Value,
		&i.Created,
		&i.BufoID,
	)
	return i, err
}

const getBufo = `-- name: GetBufo :one
select
    name,
    (
        select
            avg(value)
        from
            viewer_bufovote
        where
            bufo_id = name
    ) as rating
from
    viewer_bufo
where
    name = $1
`

type GetBufoRow struct {
	Name   string
	Rating float64
}

func (q *Queries) GetBufo(ctx context.Context, name string) (GetBufoRow, error) {
	row := q.db.QueryRow(ctx, getBufo, name)
	var i GetBufoRow
	err := row.Scan(&i.Name, &i.Rating)
	return i, err
}

const listBufos = `-- name: ListBufos :many
select
    name,
    (
        select
            cast(COALESCE(avg(value), -1) as INTEGER)
        from
            viewer_bufovote
        where
            bufo_id = name
    ) as rating
from
    viewer_bufo
`

type ListBufosRow struct {
	Name   string
	Rating int32
}

func (q *Queries) ListBufos(ctx context.Context) ([]ListBufosRow, error) {
	rows, err := q.db.Query(ctx, listBufos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListBufosRow
	for rows.Next() {
		var i ListBufosRow
		if err := rows.Scan(&i.Name, &i.Rating); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
